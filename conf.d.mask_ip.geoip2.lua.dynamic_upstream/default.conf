# modsecurity
modsecurity on;
modsecurity_rules_file /opt/modsecurity.d/include.conf;

# mask_ip
js_include  conf/mask_ip.js;
js_set      $remote_addr_masked maskRemoteAddress;

# geoip2
geoip2 /opt/geoip2/GeoLite2-Country.mmdb {
    $geoip2_country_code default=XX source=$http_x_forwarded_for country iso_code;
    $geoip2_country_name default=Unknown source=$http_x_forwarded_for country names en;
}

# mask_ip, geoip2
log_format  masked
    '$request_id $remote_addr_masked '
    '$geoip2_country_code $geoip2_country_name $upstream_addr '
    '- $remote_user [$time_local] "$request" '
    '$status $body_bytes_sent "$http_referer" '
    '"$http_user_agent" "$http_x_forwarded_for"';
log_format  nomask
    '$request_id $remote_addr_masked  $remote_addr';

# dynamic_upstream
include /etc/nginx/conf/upstream.app.conf;


# http
server {
    listen 80 default_server;
    server_name  localhost;

    charset UTF-8;

    # mask_ip
    access_log  /var/log/nginx/access.log  masked;
    access_log  /var/log/nginx/access.nomask.log  nomask;

    location / {
        root   /usr/local/nginx/html;
        index  index.html index.htm;
    }
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/local/nginx/html;
    }
    location = /favicon.ico {
        empty_gif;
    }
    location ~ /\.ht {
        deny  all;
    }
    location /status {
        stub_status;
        allow 127.0.0.1;
        deny all;
    }

    # ca.der for test.key
    location /ca.der {
        alias /etc/nginx/conf/ca.der;
    }

    # lua
    location /lua {
        default_type text/html;
        content_by_lua '
            ngx.say("<p>lua</p>")
        ';
    }

    # dynamic_upstream
    location /dynamic {
        allow 127.0.0.1;
        deny all;
        dynamic_upstream;
    }
}
server {
    listen 81;
    server_name  blue;
    access_log  /var/log/nginx/access.blue.log  main;
    location = /favicon.ico {
        empty_gif;
    }
    # lua
    location / {
        default_type text/html;
        content_by_lua '
            ngx.say("<p>blue</p>")
        ';
    }
}
server {
    listen 82;
    server_name  green;
    access_log  /var/log/nginx/access.green.log  main;
    location = /favicon.ico {
        empty_gif;
    }
    # lua
    location / {
        default_type text/html;
        content_by_lua '
            ngx.say("<p>green</p>")
        ';
    }
}

# https
server {
    # lua don't work with http2
    #listen 443 ssl http2 default_server;
    listen 443 ssl default_server;
    server_name  localhost;

    ssl_protocols TLSv1.2;
    ssl_prefer_server_ciphers on;
    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256;
    ssl_certificate /etc/nginx/conf/nginx.crt;
    ssl_certificate_key /etc/nginx/conf/server.key;
    ssl_session_timeout 10m;
    ssl_session_cache shared:SSL:10m;

    charset UTF-8;

    # mask_ip
    access_log  /var/log/nginx/access.log  masked;
    access_log  /var/log/nginx/access.nomask.log  nomask;

    location / {
        root   /usr/local/nginx/html;
        index  index.html index.htm;
    }
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/local/nginx/html;
    }
    location = /favicon.ico {
        empty_gif;
    }
    location ~ /\.ht {
        deny  all;
    }

    # lua
    location /lua {
        default_type text/html;
        content_by_lua '
            ngx.say("<p>lua</p>")
        ';
    }
}
server {
    # lua don't work with http2
    #listen 443 ssl http2;
    listen 443 ssl;
    server_name  dynamic.docker.test;

    ssl_protocols TLSv1.2;
    ssl_prefer_server_ciphers on;
    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256;
    ssl_certificate /etc/nginx/conf/nginx.crt;
    ssl_certificate_key /etc/nginx/conf/server.key;
    ssl_session_timeout 10m;
    ssl_session_cache shared:SSL:10m;

    charset UTF-8;

    # mask_ip
    access_log  /var/log/nginx/access.log  masked;
    access_log  /var/log/nginx/access.nomask.log  nomask;

    location / {
        proxy_pass http://app;
    }
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/local/nginx/html;
    }
    location = /favicon.ico {
        empty_gif;
    }
    location ~ /\.ht {
        deny  all;
    }
}

